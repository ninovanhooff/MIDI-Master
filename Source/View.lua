---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ninovanhooff.
--- DateTime: 22/07/2022 15:10
---

import "CoreLibs/object"
import "CoreLibs/ui"
import "CoreLibs/graphics"

local gfx <const> = playdate.graphics
local listY <const> = 18
local stepWidth <const> = 2
local smallGutter <const> = 2
local gutter <const> = 4
local trackControlsWidth <const> = 150
local buttonRadius <const> = 2
local rowHeight <const> = 38
local viewModel
local listView = playdate.ui.gridview.new(0, rowHeight)
listView:setCellPadding(0, 0, 0, smallGutter) -- left, right , top, bottom


class("View").extends()

function View:init(vm)
    viewModel = vm
    listView:setNumberOfRows(vm.numTracks)
end

function listView:drawCell(_, row, _, selected, x, y, width, height)
    gfx.pushContext()
    if selected then
        gfx.fillRect(x,y+1,trackControlsWidth,height)
    else
        gfx.drawRect(x,y+1,trackControlsWidth,height)
    end

    gfx.setColor(playdate.graphics.kColorXOR)
    gfx.setImageDrawMode(gfx.kDrawModeNXOR) -- text

    gfx.drawText(viewModel:trackName(row), x + gutter, y + gutter)

    local soloButtonX = x+gutter
    local muteButtonX = x + 16 + gutter*2
    local buttonY = y + 20

    -- solo
    if viewModel:isSolo(row) then
        gfx.fillRoundRect(soloButtonX, buttonY, 16,16, buttonRadius)
    else
        gfx.drawRoundRect(soloButtonX, buttonY, 16,16, buttonRadius)
    end
    gfx.drawText("s", soloButtonX+5, buttonY)

    -- mute
    if viewModel:isMuted(row) then
        gfx.fillRoundRect(muteButtonX, buttonY, 16,16, buttonRadius)
    else
        gfx.drawRoundRect(muteButtonX, buttonY, 16,16, buttonRadius)
    end
    gfx.drawText("m", muteButtonX + 3, buttonY)

    gfx.setLineWidth(2)
    local potY = y + 30
    local potSpacing = 22
    local attack, decay, sustain, release = viewModel:getADSR(row)
    -- attack
    local attackX = muteButtonX + 40
    drawPot("a", attackX, potY, attack)
    -- decay
    local decayX = attackX + potSpacing
    drawPot("d", decayX, potY, decay)
    -- sustain
    local sustainX = decayX + potSpacing
    drawPot("s", sustainX, potY, sustain)
    -- release
    local releaseX = sustainX + potSpacing
    drawPot("r", releaseX, potY, release)


    gfx.setLineWidth(1)

    -- Notes
    gfx.setClipRect(x+trackControlsWidth, listY, 400-x-trackControlsWidth, 240)


    if viewModel:drawShaded(row) then
        gfx.pushContext()
        gfx.setDitherPattern(0.8, gfx.image.kDitherTypeDiagonalLine) -- invert alpha due to bug in SDK
        gfx.fillRect(trackControlsWidth, y+1, width - trackControlsWidth, height)
        gfx.popContext()
    end

    local stepOffset, noteY
    local currentStep = viewModel:getCurrentStep()
    local lastStepOffset = 0
    local simultaneous = 0
    for _, item in ipairs(viewModel:getVisibleNotes(row)) do
        stepOffset = (item.step - currentStep) * stepWidth
        if stepOffset == lastStepOffset then
            simultaneous = simultaneous + 1
        else
            simultaneous = 0
        end
        lastStepOffset = stepOffset
        noteY = y + gutter + item.velocity*4 + simultaneous * 4
        gfx.fillRect(x + trackControlsWidth + gutter + stepOffset, noteY, (item.length/ stepWidth),3)
    end

    gfx.popContext()
end

function drawPot(text, x, y, value)
    value = lume.clamp(value, 0.03, 1.0)
    gfx.drawArc(x, y, 8, 225, 225 + (value*270))
    gfx.drawText(text, x-4, y-8)
end

function View:draw()
    gfx.clear(gfx.kColorWhite)
    if listView:getSelectedRow() ~= viewModel.selectedIdx then
        listView:setSelectedRow(viewModel.selectedIdx)
        listView:scrollToRow(viewModel.selectedIdx)
    end

    -- tracks
    listView:drawInRect(smallGutter, listY,400 - smallGutter,220)

    -- progress
    gfx.drawRect(100, smallGutter, 200, 12)
    gfx.fillRect(
        100 + smallGutter, smallGutter + smallGutter,
        (200 - 2* smallGutter) * viewModel:getProgress(),
        12 - 2 * smallGutter)
    gfx.drawLine(0, listY - 1,400, listY - 1)

end
