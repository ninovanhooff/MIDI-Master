---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ninovanhooff.
--- DateTime: 22/07/2022 15:10
---

import "CoreLibs/object"
import "CoreLibs/ui"
import "CoreLibs/graphics"

local gfx <const> = playdate.graphics
local lume <const> = lume
local screenW <const> = playdate.display.getWidth()
local floor <const> = math.floor
local listY <const> = 18
local smallGutter <const> = 2
local gutter <const> = 4
local trackControlsWidth <const> = 150
local buttonRadius <const> = 2
local rowHeight <const> = 38
local progressBarWidth <const> = 100
local progressBarX <const> = screenW - progressBarWidth - smallGutter
local viewModel
local listView = playdate.ui.gridview.new(0, rowHeight)
local trackStrips, stripWidth
listView:setCellPadding(0, 0, 0, smallGutter) -- left, right , top, bottom


class("View").extends()

function View:init(vm)
    trackStrips = {}
    viewModel = vm
    local numTracks = vm.numTracks
    if vm.numTracks == 0 then
        self.error = "Number of tracks is 0. Was the filename spelled correctly?"
        return
    end

    local numSteps = vm:getNumSteps()
    local stepsPerPixel = lume.clamp(
        numSteps / screenW,
        1, 4
    )
    stripWidth = numSteps / stepsPerPixel
    print("steps per pixel", stepsPerPixel, "stripWidth", stripWidth)
    listView:setNumberOfRows(numTracks)
    for i = 1, numTracks do
        local curStrip = gfx.image.new(stripWidth, rowHeight)
        gfx.pushContext(curStrip)
        trackStrips[i] = curStrip

        local notes = vm:getNotes(i)
        for _, note in ipairs(notes) do
            for curStep = note.step, note.step + note.length do
                gfx.drawPixel(floor(curStep/stepsPerPixel), (note.note / 127) * rowHeight)
            end
        end
        gfx.popContext()
    end
end

function listView:drawCell(_, row, _, selected, x, y, width, height)
    gfx.pushContext()
    if selected then
        gfx.fillRect(x,y+1,trackControlsWidth,height)
    else
        gfx.drawRect(x,y+1,trackControlsWidth,height)
    end

    gfx.setColor(playdate.graphics.kColorXOR)
    gfx.setImageDrawMode(gfx.kDrawModeNXOR) -- text

    gfx.drawText(viewModel:trackName(row), x + gutter, y + gutter)

    local soloButtonX = x+gutter
    local muteButtonX = x + 16 + gutter*2
    local buttonY = y + 20

    -- solo
    if viewModel:isSolo(row) then
        gfx.fillRoundRect(soloButtonX, buttonY, 16,16, buttonRadius)
    else
        gfx.drawRoundRect(soloButtonX, buttonY, 16,16, buttonRadius)
    end
    gfx.drawText("s", soloButtonX+5, buttonY)

    -- mute
    if viewModel:isMuted(row) then
        gfx.fillRoundRect(muteButtonX, buttonY, 16,16, buttonRadius)
    else
        gfx.drawRoundRect(muteButtonX, buttonY, 16,16, buttonRadius)
    end
    gfx.drawText("m", muteButtonX + 3, buttonY)

    gfx.setLineWidth(2)
    local potY = y + 30
    local potSpacing = 22
    local attack, decay, sustain, release = viewModel:getADSR(row)
    -- attack
    local attackX = muteButtonX + 40
    drawPot("a", attackX, potY, attack)
    -- decay
    local decayX = attackX + potSpacing
    drawPot("d", decayX, potY, decay)
    -- sustain
    local sustainX = decayX + potSpacing
    drawPot("s", sustainX, potY, sustain)
    -- release
    local releaseX = sustainX + potSpacing
    drawPot("r", releaseX, potY, release)


    gfx.setLineWidth(1)

    -- Notes
    gfx.setClipRect(x+trackControlsWidth, listY, screenW-x-trackControlsWidth, 240)


    if viewModel:drawShaded(row) then
        gfx.pushContext()
        gfx.setDitherPattern(0.8, gfx.image.kDitherTypeDiagonalLine) -- invert alpha due to bug in SDK
        gfx.fillRect(trackControlsWidth, y+1, width - trackControlsWidth, height)
        gfx.popContext()
    end

        trackStrips[row]:draw(
            trackControlsWidth - (viewModel:getProgress() * stripWidth),
            y
        )

    gfx.popContext()
end

function drawPot(text, x, y, value)
    value = lume.clamp(value, 0.03, 1.0)
    gfx.drawArc(x, y, 8, 225, 225 + (value*270))
    gfx.drawText(text, x-4, y-8)
end

function View:draw()
    gfx.clear(gfx.kColorWhite)

    -- draw filename without escapes
    gfx.getFont():drawText(viewModel.currentSongPath, 2,2)

    if self.error then
        gfx.drawText(self.error, 50,100)
        return
    end

    if listView:getSelectedRow() ~= viewModel.selectedIdx then
        listView:setSelectedRow(viewModel.selectedIdx)
        listView:scrollToRow(viewModel.selectedIdx)
    end

    -- tracks
    listView:drawInRect(smallGutter, listY,screenW - smallGutter,220)

    -- progress
    gfx.drawRect(progressBarX, smallGutter, progressBarWidth, 12)
    gfx.fillRect(
        progressBarX + smallGutter, smallGutter + smallGutter,
        (progressBarWidth - 2* smallGutter) * viewModel:getProgress(),
        12 - 2 * smallGutter)
    gfx.drawLine(0, listY - 1,screenW, listY - 1)

end
